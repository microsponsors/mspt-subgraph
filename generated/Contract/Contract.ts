// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get tokenOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get tokenOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Contract__tokenTimeSlotResult {
  value0: Address;
  value1: Address;
  value2: string;
  value3: string;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: i32;
  value8: boolean;
  value9: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: string,
    value3: string,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: i32,
    value8: boolean,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintFee(): BigInt {
    let result = super.call("mintFee", "mintFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintFee", "mintFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToFederationId(param0: BigInt): BigInt {
    let result = super.call(
      "tokenToFederationId",
      "tokenToFederationId(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenToFederationId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenToFederationId",
      "tokenToFederationId(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensMintedBy(minter: Address): Array<BigInt> {
    let result = super.call(
      "tokensMintedBy",
      "tokensMintedBy(address):(uint256[])",
      [ethereum.Value.fromAddress(minter)]
    );

    return result[0].toBigIntArray();
  }

  try_tokensMintedBy(minter: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "tokensMintedBy",
      "tokensMintedBy(address):(uint256[])",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  owner2(): Address {
    let result = super.call("owner2", "owner2():(address)", []);

    return result[0].toAddress();
  }

  try_owner2(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner2", "owner2():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(tokenOwner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(tokenOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner1(): Address {
    let result = super.call("owner1", "owner1():(address)", []);

    return result[0].toAddress();
  }

  try_owner1(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner1", "owner1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenMinterPropertyNames(minter: Address, contentId: string): Array<string> {
    let result = super.call(
      "tokenMinterPropertyNames",
      "tokenMinterPropertyNames(address,string):(string[])",
      [ethereum.Value.fromAddress(minter), ethereum.Value.fromString(contentId)]
    );

    return result[0].toStringArray();
  }

  try_tokenMinterPropertyNames(
    minter: Address,
    contentId: string
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "tokenMinterPropertyNames",
      "tokenMinterPropertyNames(address,string):(string[])",
      [ethereum.Value.fromAddress(minter), ethereum.Value.fromString(contentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensOfOwner(tokenOwner: Address): Array<BigInt> {
    let result = super.call(
      "tokensOfOwner",
      "tokensOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(tokenOwner)]
    );

    return result[0].toBigIntArray();
  }

  try_tokensOfOwner(tokenOwner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "tokensOfOwner",
      "tokensOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenMinterContentIds(minter: Address): Array<string> {
    let result = super.call(
      "tokenMinterContentIds",
      "tokenMinterContentIds(address):(string[])",
      [ethereum.Value.fromAddress(minter)]
    );

    return result[0].toStringArray();
  }

  try_tokenMinterContentIds(
    minter: Address
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "tokenMinterContentIds",
      "tokenMinterContentIds(address):(string[])",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenTimeSlot(tokenId: BigInt): Contract__tokenTimeSlotResult {
    let result = super.call(
      "tokenTimeSlot",
      "tokenTimeSlot(uint256):(address,address,string,string,uint48,uint48,uint48,uint16,bool,uint32)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new Contract__tokenTimeSlotResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toI32(),
      result[8].toBoolean(),
      result[9].toBigInt()
    );
  }

  try_tokenTimeSlot(
    tokenId: BigInt
  ): ethereum.CallResult<Contract__tokenTimeSlotResult> {
    let result = super.tryCall(
      "tokenTimeSlot",
      "tokenTimeSlot(uint256):(address,address,string,string,uint48,uint48,uint48,uint16,bool,uint32)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__tokenTimeSlotResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toI32(),
        value[8].toBoolean(),
        value[9].toBigInt()
      )
    );
  }

  isApprovedForAll(tokenOwner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    tokenOwner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class SafeMintWithTokenURICall extends ethereum.Call {
  get inputs(): SafeMintWithTokenURICall__Inputs {
    return new SafeMintWithTokenURICall__Inputs(this);
  }

  get outputs(): SafeMintWithTokenURICall__Outputs {
    return new SafeMintWithTokenURICall__Outputs(this);
  }
}

export class SafeMintWithTokenURICall__Inputs {
  _call: SafeMintWithTokenURICall;

  constructor(call: SafeMintWithTokenURICall) {
    this._call = call;
  }

  get contentId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get propertyName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get startTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get auctionEndTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get category(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get isSecondaryTradingEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get federationId(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get tokenURI(): string {
    return this._call.inputValues[8].value.toString();
  }
}

export class SafeMintWithTokenURICall__Outputs {
  _call: SafeMintWithTokenURICall;

  constructor(call: SafeMintWithTokenURICall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get contentId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get propertyName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get startTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get auctionEndTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get category(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get isSecondaryTradingEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get federationId(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class UpdateMintFeeCall extends ethereum.Call {
  get inputs(): UpdateMintFeeCall__Inputs {
    return new UpdateMintFeeCall__Inputs(this);
  }

  get outputs(): UpdateMintFeeCall__Outputs {
    return new UpdateMintFeeCall__Outputs(this);
  }
}

export class UpdateMintFeeCall__Inputs {
  _call: UpdateMintFeeCall;

  constructor(call: UpdateMintFeeCall) {
    this._call = call;
  }

  get val(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMintFeeCall__Outputs {
  _call: UpdateMintFeeCall;

  constructor(call: UpdateMintFeeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class MintWithTokenURICall extends ethereum.Call {
  get inputs(): MintWithTokenURICall__Inputs {
    return new MintWithTokenURICall__Inputs(this);
  }

  get outputs(): MintWithTokenURICall__Outputs {
    return new MintWithTokenURICall__Outputs(this);
  }
}

export class MintWithTokenURICall__Inputs {
  _call: MintWithTokenURICall;

  constructor(call: MintWithTokenURICall) {
    this._call = call;
  }

  get contentId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get propertyName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get startTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get auctionEndTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get category(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get isSecondaryTradingEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get federationId(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get tokenURI(): string {
    return this._call.inputValues[8].value.toString();
  }
}

export class MintWithTokenURICall__Outputs {
  _call: MintWithTokenURICall;

  constructor(call: MintWithTokenURICall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateRegistryAddressCall extends ethereum.Call {
  get inputs(): UpdateRegistryAddressCall__Inputs {
    return new UpdateRegistryAddressCall__Inputs(this);
  }

  get outputs(): UpdateRegistryAddressCall__Outputs {
    return new UpdateRegistryAddressCall__Outputs(this);
  }
}

export class UpdateRegistryAddressCall__Inputs {
  _call: UpdateRegistryAddressCall;

  constructor(call: UpdateRegistryAddressCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRegistryAddressCall__Outputs {
  _call: UpdateRegistryAddressCall;

  constructor(call: UpdateRegistryAddressCall) {
    this._call = call;
  }
}

export class TransferOwnership2Call extends ethereum.Call {
  get inputs(): TransferOwnership2Call__Inputs {
    return new TransferOwnership2Call__Inputs(this);
  }

  get outputs(): TransferOwnership2Call__Outputs {
    return new TransferOwnership2Call__Outputs(this);
  }
}

export class TransferOwnership2Call__Inputs {
  _call: TransferOwnership2Call;

  constructor(call: TransferOwnership2Call) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnership2Call__Outputs {
  _call: TransferOwnership2Call;

  constructor(call: TransferOwnership2Call) {
    this._call = call;
  }
}

export class TransferOwnership1Call extends ethereum.Call {
  get inputs(): TransferOwnership1Call__Inputs {
    return new TransferOwnership1Call__Inputs(this);
  }

  get outputs(): TransferOwnership1Call__Outputs {
    return new TransferOwnership1Call__Outputs(this);
  }
}

export class TransferOwnership1Call__Inputs {
  _call: TransferOwnership1Call;

  constructor(call: TransferOwnership1Call) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnership1Call__Outputs {
  _call: TransferOwnership1Call;

  constructor(call: TransferOwnership1Call) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get contentId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get propertyName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get startTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get auctionEndTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get category(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get isSecondaryTradingEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get federationId(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeMint1Call extends ethereum.Call {
  get inputs(): SafeMint1Call__Inputs {
    return new SafeMint1Call__Inputs(this);
  }

  get outputs(): SafeMint1Call__Outputs {
    return new SafeMint1Call__Outputs(this);
  }
}

export class SafeMint1Call__Inputs {
  _call: SafeMint1Call;

  constructor(call: SafeMint1Call) {
    this._call = call;
  }

  get contentId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get propertyName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get startTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get auctionEndTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get category(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get isSecondaryTradingEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get federationId(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class SafeMint1Call__Outputs {
  _call: SafeMint1Call;

  constructor(call: SafeMint1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get registryAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
